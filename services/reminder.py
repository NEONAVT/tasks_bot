import logging
from dataclasses import dataclass
from typing import List

from bot import TelegramClient, telegram_client
from database import SessionFactory
from log_config.logging_config import setup_logging
from repository.reminder import ReminderRepository

logger = logging.getLogger(__name__)


@dataclass
class ReminderService:
    telegram_client: TelegramClient

    def execute(self) -> None:
        chat_ids = self.get_inactive_chat_ids()
        if not chat_ids:
            logger.info("–ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.")
            return
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {len(chat_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {chat_ids}")
        self.send_reminders(chat_ids)

    # def execute(self) -> None:
    #     """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: –ø–æ–ª—É—á–∞–µ—Ç chat_id –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."""
    #     try:
    #         chat_ids = self.get_inactive_chat_ids()
    #         if not chat_ids:
    #             logger.info("–ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.")
    #             return
    #
    #         logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {len(chat_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {chat_ids}")
    #         self.send_reminders(chat_ids)
    #     except Exception as e:
    #         logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", exc_info=True)
    #         raise

    def get_inactive_chat_ids(self) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–µ–ª–∞–ª–∏ standup —Å–µ–≥–æ–¥–Ω—è."""
        with SessionFactory() as session:
            repo = ReminderRepository(db_session=session)
            chat_ids = repo.get_chat_ids()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(chat_ids)}"
                        f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ chat_id: {chat_ids}")
            return chat_ids

    def send_reminders(self, chat_ids: List[int]) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        message = "–ö–∞–∫ –Ω–∞ —Å—á–µ—Ç –ø–æ—Å—Ç–µ–Ω–¥–∞–ø–∏—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è? üòä"
        for chat_id in chat_ids:
            try:
                response = self.telegram_client.post(
                    method="/sendMessage",
                    params={
                        "chat_id": chat_id,
                        "text": message
                    }
                )
                logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}. –û—Ç–≤–µ—Ç Telegram: {response}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}", exc_info=True)


if __name__ == "__main__":
    from log_config.logging_config import setup_logging  # –ø—É—Ç—å –∫ —Ç–≤–æ–µ–º—É –º–æ–¥—É–ª—é

    setup_logging()  # –ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

    reminder = ReminderService(telegram_client=telegram_client)
    reminder.execute()
